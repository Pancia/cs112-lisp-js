(import :App :from :kivy.app)
(import :Widget :from :kivy.uix.widget)
(import :Label :from :kivy.uix.label)
(import :GridLayout :from :kivy.uix.gridlayout)
(import :Button :from :kivy.uix.button)
(import :ListProperty :from :kivy.properties)
(import :NumericProperty :from :kivy.properties)
(import :ModalView :from :kivy.uix.modalview)
(defclass GridEntry [Button]
     ([] (coords (new ListProperty [0,0]))))

(def t1
  (fn [self]
    (assoc self-status statusIndex (. currentPlayer self))
    (setp button text (get player (. currentPlayer self)))
    (setp button background_color (get colors (. currentPlayer self)))
    (setp self currentPlayer (* (. currentPlayer self) -1))
    false))

(def t2
  (fn [self]
       (setp self status [0, 0, 0, 0, 0, 0, 0, 0, 0])
       (for [child (. children self)]
         (setp child text ""))
       (setp self currentPlayer 1)
       None))

(def t3
  (fn [self]
    (set player {1 "X" -1 "0"})
      (set colors {1 ^{0 0 0 0} -1 ^{0 0 0 0}})
      (set row (get button (get coords 0)))
      (set column (get button (get coords 1)))
      (set statusIndex (+ (* (get row 3)) column))
      (set alreadyPlayed (get self (get status statusIndex)))
      (if (not alreadyPlayed)
        (t1 self))))

(def t4
  (fn [self instance newVal]
    (set status newVal)
        (set sums [(+ (sc 0 3))
                   (+ (sc 3 6)) (+ (sc 6 9)) (+ (dc 0 3))
                   (+ (dc 1 4)) (+ (dc 2 3)) (+ (dc 0 4))
                   (+ (dcm 2 -2 2))])
        (set winner "")
        (set winner
          (if (in 3 sums)
            "Xs win!"))
        (set winner
          (if (in -3 sums)
            "Os win!"))
        (set winner
          (if (not (in 0 (. status self)))
                  "Draw!"))
        (if (!= winner "")
          (t5))))

(def t5
  (fn []
    (set popup (new ModalView **{"size_hunt": [(/ 3 4) , (/ 1 2)]}))
    (set victoryLabel (new Label **{"text": winner, "font_size": 50}))
    (. add_widget popup victoryLabel)
    (. bind popup **{"on_dismiss": (. reset self)})
    (. open popup)))

(defclass TicTacToeGrid [GridLayout]
  ([*args **kwargs]
   (super TicTacToeGrid *args **kwargs)
   (status (new ListProperty [0, 0, 0, 0, 0, 0, 0, 0, 0]))
   (currentPlayer (new NumericProperty 1))
   (cols 3)
   &((for [row (range 3)]
       (for [col (range 3)]
         (set _coords {"coords" : ^{row col}})
         (set gridEntry (new GridEntry **_coords))
         (set _button_pressed (. buttonPressed self))
         (set _on_release {"on_release": _button_pressed})
         (. bind gridEntry **_on_release)
         (. add_widget self gridEntry)))))

  (buttonPressed
    [button]
    (t3 self))

  (reset
    []
    (t2 self))

  (on_status
    [instance newVal]
    (t4 self instance newVal)))

(defclass TicTacToeApp [app]
 (build [self]
   (new TicTacToeGrid)))

(if (= (__name__ "__main__"))
  (. run (TicTacToeApp)))

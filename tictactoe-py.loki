(import :App :from :kivy.app)
(import :Widget :from :kivy.uix.widget)
(import :Label :from :kivy.uix.label)
(import :GridLayout :from :kivy.uix.gridlayout)
(import :Button :from :kivy.uix.button)
(import :ListProperty :from :kivy.properties)
(import :NumericProperty :from :kivy.properties)
(import :ModalView :from :kivy.uix.modalview)
(defclass GridEntry [Button]
     (coords (new ListProperty [0,0])))

(def _buttonPressed_helper
  (fn [self]
    ;TODO -> (setp self [status statusIndex] ...)
    (assoc self-status statusIndex (. currentPlayer self))
    (setp button text (get player (. currentPlayer self)))
    (setp button background_color (get colors (. currentPlayer self)))
    (setp self currentPlayer (* (. currentPlayer self) -1))
    false))

(def _reset
  (fn [self]
       (setp self status [0, 0, 0, 0, 0, 0, 0, 0, 0])
       (for [child (. children self)]
         (setp child text ""))
       (setp self currentPlayer 1)
       None))

(def _buttonPressed
  (fn [self button]
    (set player {1 "X" -1 "0"})
    (set colors {1 ^{0 0 0 0} -1 ^{0 0 0 0}})
    (set row (get (.- coords button) 0))
    (set column (get (.- coords button) 1))
    (print self)
    (set _self_status (.- status self))
    (print _self_status)
    (set statusIndex (+ (* row 3) column))
    (set alreadyPlayed (get _self_status statusIndex))
    (if (not alreadyPlayed)
      (_buttonPressed_helper self))))

(def _on_status
  (fn [self instance newVal]
    (set status newVal)
        (set sums [(+ (sc 0 3))
                   (+ (sc 3 6)) (+ (sc 6 9)) (+ (dc 0 3))
                   (+ (dc 1 4)) (+ (dc 2 3)) (+ (dc 0 4))
                   (+ (dcm 2 -2 2))])
        (set winner "")
        (set winner
          (if (in 3 sums)
            "Xs win!"))
        (set winner
          (if (in -3 sums)
            "Os win!"))
        (set winner
          (if (not (in 0 (. status self)))
                  "Draw!"))
        (if (!= winner "")
          (_on_status_helper))))

(def _on_status_helper
  (fn []
    (set _size_hunt {"size_hunt": [(/ 3 4) , (/ 1 2)]})
    (set popup (new ModalView **_size_hunt))
    (set _victory_label {"text": winner, "font_size": 50})
    (set victoryLabel (new Label **_victory_label))
    (. add_widget popup victoryLabel)
    (set _on_dismiss {"on_dismiss": (. reset self)})
    (. bind popup **_on_dismiss)
    (. open popup)))

(defclass TicTacToeGrid [GridLayout]
  ([*args **kwargs]
   (super GridLayout *args **kwargs)
   (status (new ListProperty [0, 0, 0, 0, 0, 0, 0, 0, 0]))
   (currentPlayer (new NumericProperty 1))
   (cols 3)
   &((for [row (range 3)]
       (for [col (range 3)]
         (set _coords {"coords" : ^{row col}})
         (set gridEntry (new GridEntry **_coords))
         (set _button_pressed (.- buttonPressed self))
         (set _on_release {"on_release": _button_pressed})
         (. bind gridEntry **_on_release)
         (. add_widget self gridEntry)))))

  (buttonPressed
    [button]
    (_buttonPressed self button))

  (reset
    []
    (_reset self))

  (on_status
    [instance newVal]
    (_on_status self instance newVal)))

(defclass TicTacToeApp [App]
 (build []
   (new TicTacToeGrid)))

(if (= __name__ "__main__")
  (. run (TicTacToeApp)))

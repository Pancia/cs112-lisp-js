;from kivy.app import App
;from kivy.uix.widget import Widget
;from kivy.uix.label import Label
;from kivy.uix.gridlayout import GridLayout
;from kivy.uix.button import Button
;from kivy.properties import (ListProperty, NumericProperty)
;from kivy.uix.modalview import ModalView
(defclass GridEntry [Button]
     ([] (coords (new ListProperty [0,0]))))

;grid_entry = GridEntry(coords=(row, column))
;grid_entry.bind(on_release=self.button_pressed)
;self.add_widget(grid_entry)

(def t1
  (fn [self]
    (assoc self-status statusIndex (. currentPlayer self))
    (setp button text (get player (. currentPlayer self)))
    (setp button background_color (get colors (. currentPlayer self)))
    (setp self currentPlayer (* (. currentPlayer self) -1))
    false))

(defclass TicTacToeGrid [GridLayout]
  ([*args **kwargs]
   ;(super TicTacToeGrid *args **kwargs)
   (status (new ListProperty [0, 0, 0, 0, 0, 0, 0, 0, 0]))
   (currentPlayer (new NumericProperty 1))
   (cols 3)
   &((for [row (range 3)]
       (for [col (range 3)]
         (set _coords {"coords" : ^{row col}})
         (set gridEntry (new GridEntry **_coords))
         (set _button_pressed (. buttonPressed self))
         (set _on_release {"on_release": _button_pressed})
         (. bind gridEntry **_on_release)
         (. add_widget self gridEntry)))))

  (buttonPressed
    [button]
    (do
      (set player {1 "X" -1 "0"})
      (set colors {1 ^{0 0 0 0} -1 ^{0 0 0 0}})
      (set row (get button (get coords 0)))
      (set column (get button (get coords 1)))
      (set statusIndex (+ (* (get row 3)) column))
      (set alreadyPlayed (get self (get status statusIndex)))
      (if (not alreadyPlayed)
        (t1 self))))

  (reset
    [*args]
    ((fn []
       (setp self status [0, 0, 0, 0, 0, 0, 0, 0, 0])
       (for [child (. children self)]
         (setp child text ""))
       (setp self currentPlayer 1))))

  (on_status
    [instance newVal]
    (do (set status newVal)
        (set sums [(+ (sc 0 3))
                   (+ (sc 3 6)) (+ (sc 6 9)) (+ (dc 0 3))
                   (+ (dc 1 4)) (+ (dc 2 3)) (+ (dc 0 4))
                   (+ (dcm 2 -2 2))])
        (set winner "")
        (if (in 3 sums)
          (set winner "Xs win!"))
        (if (in -3 sums)
          (set winner "Os win!"))
        (if (!in 0 (. status self))
          (set winner "Draw!"))
        (if (!= winner "")
          ((fn []
             (set popup (new ModalView **{"size_hunt": [(/ 3 4) , (/ 1 2)]}))
             (set victoryLabel (new Label **{"text": winner, "font_size": 50}))
             (. add_widget popup victoryLabel)
             (. bind popup **{"on_dismiss": (. reset self)})
             (. open popup)))))))

;(defclass TicTacToeApp [app]
; (build [self]
;   (new TicTacToeGrid)))

(if (= (__name__ "__main__"))
  (. run (TicTacToeApp)))

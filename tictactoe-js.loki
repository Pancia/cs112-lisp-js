(def painted)
(def content)
(def winningCombos)
(def turn 0)
(def c)
(def cxt)
(def squaresFilled 0)
(def w)
(def y)

(set myObj {})
(setp myObj foo 5)
(print myObj)

(setp window onload
      (fn []
        (set painted [])
        (set content [])
        (set winningCombos [[0,1,2],[3,4,5],[6,7,8],[0,3,6],
                            [1,4,7],[2,5,8],[0,4,8],[2,4,6]])
        (. forEach (range 9)
           (fn [l]
             (assoc painted l false)
             (assoc content l "")))))

(def movePlayer
  (fn [cn]
    (alert "movePlayer")
    (. beginPath cxt)
    (. moveTo cxt 10 10)
    (. lineTo cxt 40 40)
    (. moveTo cxt 40 10)
    (. lineTo cxt 10 40)
    (. stroke cxt)
    (. closePath cxt)
    (assoc content (- cn 1) "X")
    (onEndTurn cn)))

(def moveComputer
  (fn [cn]
    (alert "moveComputer")
    (. beginPath cxt)
    (. arc cxt 25 25 20 0 (* (. PI Math) 2) true)
    (. stroke cxt)
    (. closePath cxt)
    (assoc content (- cn 1) "O")
    (onEndTurn cn)))

(def onEndTurn
  (fn [cn]
    (alert "onEndTurn")
    (set turn (+ turn 1))
    (assoc painted (- cn 1) true)
    (set squaresFilled (+ squaresFilled 1))
    (checkForWinners (get content (- cn 1)))
    (if (= squaresFilled 9)
      (alert "Draw!")
      (. reload location true))))

(def theCanvas)
(def canvasClicked
  (fn [cn]
    (set theCanvas (+ "canvas" cn))
    (set c (. getElementById document theCanvas))
    (set cxt (. getContext c "2d"))
    (if (= (get painted (- cn 1)) false)
      (if (= (mod turn 2))
        (movePlayer cn)
        (moveComputer cn))
      (alert "Invalid move!"))))

(def onVictory
  (fn [sym]
    (alert (+ sym " won!"))
    (playAgain)))

;How to access 2D array?
(def checkForWinners
  (fn [sym]
    (. forEach (range 6)
       (fn [a]
         (alert content)
         (alert (get (get winningCombos a) 0))
         (if (and (= (get content (get (get winningCombos a) 0)) sym)
                  (= (get content (get (get winningCombos a) 1)) sym)
                  (= (get content (get (get winningCombos a) 2)) sym))
           (onVictory sym))))))

(def playAgain
  (fn []
    (set y (confirm "Play again?"))
    (if (= y true)
      (. reload location true))))

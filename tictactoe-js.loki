(def painted)
(def content)
(def winningCombos)
(def turn 0)
(def c)
(def cxt)
(def squaresFilled 0)
(def w)
(def y)

(setp window onload
      (fn []
        (set painted [])
        (set content [])
        (set winningCombos [[0,1,2],[3,4,5],[6,7,8],[0,3,6],
                            [1,4,7],[2,5,8],[0,4,8],[2,4,6]])
        (. forEach (range 9)
           (fn [l]
             (. appendTo
                ($ "<canvas/>" {:id (+ "canvas" (+ l 1))
                                :width "50"
                                :height "50"
                                :style "border:1px solid black"
                                :onclick (+ "canvasClicked(" (+ l 1) ")")})
                "body")
             (if (or (= l 2)
                     (= l 5))
               (. appendTo
                  ($ "<br>")
                  "body"))
             (assoc painted l false)
             (assoc content l "")))))

(def movePlayer
  (fn [cn]
    (. beginPath cxt)
    (. moveTo cxt 10 10)
    (. lineTo cxt 40 40)
    (. moveTo cxt 40 10)
    (. lineTo cxt 10 40)
    (. stroke cxt)
    (. closePath cxt)
    (assoc content (- cn 1) "X")
    (onEndTurn cn)))

(def moveComputer
  (fn [cn]
    (. beginPath cxt)
    (. arc cxt 25 25 20 0 (* (. PI Math) 2) true)
    (. stroke cxt)
    (. closePath cxt)
    (assoc content (- cn 1) "O")
    (onEndTurn cn)))

(def onEndGame
  (fn []
    (. reload location true)))

(def onEndTurn
  (fn [cn]
    (set turn (+ turn 1))
    (assoc painted (- cn 1) true)
    (set squaresFilled (+ squaresFilled 1))
    (checkForWinners (get content (- cn 1)))
    (if (= squaresFilled 9)
      (onEndGame))))

(def theCanvas)
(def canvasClicked
  (fn [cn]
    (set theCanvas (+ "canvas" cn))
    (set c (. getElementById document theCanvas))
    (set cxt (. getContext c "2d"))
    (if (= (get painted (- cn 1)) false)
      (if (= (mod turn 2) 0)
        (movePlayer cn)
        (moveComputer cn))
      (print "Invalid move!"))))

(def onVictory
  (fn [sym]
    (print (+ sym " won!"))
    (playAgain)))

;How to access 2D array?
(def checkForWinners
  (fn [sym]
    (. forEach (range (. length winningCombos))
       (fn [a]
         (if (and (= (get content (get (get winningCombos a) 0)) sym)
                  (= (get content (get (get winningCombos a) 1)) sym)
                  (= (get content (get (get winningCombos a) 2)) sym))
           (onVictory sym))))))

(def playAgain
  (fn []
    (set y (confirm "Play again?"))
    (if (= y true)
      (. reload location true))))

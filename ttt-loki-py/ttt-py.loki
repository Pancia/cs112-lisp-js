(import :App :from :kivy.app)
(import :Widget :from :kivy.uix.widget)
(import :Label :from :kivy.uix.label)
(import :GridLayout :from :kivy.uix.gridlayout)
(import :Button :from :kivy.uix.button)
(import :ListProperty :from :kivy.properties)
(import :NumericProperty :from :kivy.properties)
(import :ModalView :from :kivy.uix.modalview)
(defclass GridEntry [Button]
     (coords (new ListProperty [0,0])))

(def _buttonPressed_helper
  (fn [self button statusIndex player colors]
    #{self.status[statusIndex] = self.currentPlayer}
    (setp button text (get player (.- currentPlayer self)))
    (setp button background_color (get colors (.- currentPlayer self)))
    (setp self currentPlayer (* (.- currentPlayer self) -1))
    false))

(def on_win
  (fn [self winner]
    (set _size_hint {"size_hint": [0.75 0.5]})
    (set popup (new ModalView **_size_hint))
    (set _victory_label {"text": winner, "font_size": 50})
    (set victoryLabel (new Label **_victory_label))
    (. add_widget popup victoryLabel)
    (set _on_dismiss {"on_dismiss": (.- reset self)})
    (. bind popup **_on_dismiss)
    (. open popup)))

(defclass TicTacToeGrid [GridLayout]
  ([*args **kwargs]
   (super GridLayout *args **kwargs)
   &((for [row (range 3)]
       (for [col (range 3)]
         (set _coords {"coords" : ^{row col}})
         (set gridEntry (new GridEntry **_coords))
         (set _button_pressed (.- buttonPressed self))
         (set _on_release {"on_release": _button_pressed})
         (. bind gridEntry **_on_release)
         (. add_widget self gridEntry)))))

  (buttonPressed
    [button]
    (set player {-1 "0" 1 "X"})
    (set colors {1 ^{1 0 0 0.8} -1 ^{0 0 1 0.8}})
    (set row (get (.- coords button) 0))
    (set column (get (.- coords button) 1))
    (set statusIndex (+ (* row 3) column))
    (set _self_status (.- status self))
    (set alreadyPlayed (get _self_status statusIndex))
    (if (not alreadyPlayed)
      (_buttonPressed_helper self button statusIndex player colors)))

  (reset
    [*args]
    (setp self status [0, 0, 0, 0, 0, 0, 0, 0, 0])
    (for [child (.- children self)]
      (setp child text ""))
    (setp self currentPlayer 1)
    None)

  (on_status
    [instance newVal]
    (set status newVal)
    (set sums [(sum (sc status 0 3)) (sum (sc status 3 6))
               (sum (sc status 6 9)) (sum (dc status 0 3))
               (sum (dc status 1 3)) (sum (dc status 2 3))
               (sum (dc status 0 4)) (sum (dcm status 2 -2 2))])

    (set winner
         (if (in 3 sums)
           "Xs win!"
           (if (in -3 sums)
             "Os win!"
             (if (not (in 0 (.- status self)))
               "Draw!"
               None))))

    (if winner
      (on_win self winner)))

  (status (new ListProperty [0, 0, 0, 0, 0, 0, 0, 0, 0]))
  (currentPlayer (new NumericProperty 1)))

(defclass TicTacToeApp [App]
 (build []
   (new TicTacToeGrid)))

(if (= __name__ "__main__")
  (. run (TicTacToeApp)))
